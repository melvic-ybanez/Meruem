(defmacro if (predicate do-if-true do-if-false)
  `(cond (,predicate ,do-if-true) (true ,do-if-false)))
  
(defmacro defun (name args body) `(def ,name (lambda ,args ,body)))

(defun lazy (expr) (lambda () ,expr))

(defun truthy? (expr) (and (!= expr false) (!= expr nil)))

(defun falsy? (expr) (not (true? expr)))

(defun identity (x) x)

(defun even? (n) (if (= n 0) true  (odd? (- n 1))))
  
(defun odd? (n) (if (= n 0) false (even? (- n 1))))
         
(defmacro or (& xs)
  `(apply cond (',lists.map ',xs (lambda (x) `(,x ,x)))))
         
(defmacro and (& xs)
  `(tail-rec ((xs ',xs) (acc true))
     (if (empty? xs) acc
       (let ((and:h (eval (head xs)))) 
         (if and:h (recur (tail xs) and:h) and:h)))))
         
(defun != (& xs) (not (apply = xs)))

(defun >=< (xs f)
  (truthy? 
    (tail-rec ((xs (tail xs)) (acc (head xs)))
      (if (empty? xs) acc
        (let ((x (head xs)))
          (if (f acc x) (recur (tail xs) x) false))))))

(defun >= (& xs) (>=< xs (lambda (acc x) (or (> acc x) (= acc x)))))
          
(defun <= (& xs) (>=< xs (lambda (acc x) (or (< acc x) (= acc x)))))          

(import "lists")

(def size lists.size)

(def empty? lists.empty?)

(def ++ lists.concat)

(defmacro defun (name args body) `(def ,name (lambda ,args ,body)))

(import "lists")
(import "io")

(defmacro if (predicate do-if-true do-if-false)
  `(cond (,predicate ,do-if-true) (true ,do-if-false)))

(defmacro lazy (expr) `(lambda () ,expr))

(defun truthy? (expr) (and (!= expr false) (!= expr nil)))

(defun falsy? (expr) (not (truthy? expr)))

(defun identity (x) x)

(defun even? (n) (if (= n 0) true  (odd? (- n 1))))
  
(defun odd? (n) (if (= n 0) false (even? (- n 1))))
         
(defmacro or (& xs)
  `(apply cond (',lists.map ',xs (lambda (x) `(,x ,x)))))
         
(defmacro and (& xs)
  (let { h (gensym) }
    `(tail-rec  { xs ',xs acc true }
       (if (empty? xs) acc
         (let { ,h (eval (head xs)) } 
           (if ,h (recur (tail xs) ,h) ,h))))))
         
(defun != (& xs) (not (apply = xs)))

(defun >=< (xs f)
  (truthy? 
    (tail-rec { xs (tail xs) acc (head xs) }
      (if (empty? xs) acc
        (let ((x (head xs)))
          (if (f acc x) (recur (tail xs) x) false))))))

(defun >= (& xs) (>=< xs (lambda (acc x) (or (> acc x) (= acc x)))))
          
(defun <= (& xs) (>=< xs (lambda (acc x) (or (< acc x) (= acc x)))))      
    
(defun to-list (xs) (lists.fold-right xs () cons))

(defun to-empty (xs)
  (let ((input-type (type xs)))
    (if (= input-type 'String) ""
      (if (= input-type 'List) () nil))))
      
(defun str (& xs) (lists.fold-left xs "" (lambda (acc x) (++ acc (to-string x)))))      

(defun inc (x) (+ x 1))

(defun dec (x) (- x 1))


; ===========================================================
; These are the aliases of some of the most common functions
; ===========================================================

(def size lists.size)

(def empty? lists.empty?)

(def ++ lists.concat)

(def println io.println)

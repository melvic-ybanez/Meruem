(defmacro if (predicate do-if-true do-if-false)
  `(cond (,predicate ,do-if-true) (true ,do-if-false)))
  
(defmacro defun (name args body) `(def ,name (lambda ,args ,body)))

(defun lazy (expr) (lambda () ,expr))

(defun size (xs)
  (if (= xs ()) 0 (+ 1 (size (tail xs)))))
  
(defun empty? (xs) (= (size xs) 0))

(defun even? (n) (if (= n 0) true  (odd? (- n 1))))
  
(defun odd? (n) (if (= n 0) false (even? (- n 1))))

(defmacro or (& xs)
  `(tail-rec ((xs ',xs) (acc nil))
     (if (empty? xs) acc 
       (let ((h (eval (head xs)))) 
         (if h h (recur (tail xs) h))))))
         
(defmacro and (& xs)
  `(tail-rec ((xs ',xs) (acc true))
     (if (empty? xs) acc
       (let ((h (eval (head xs)))) 
         (if h (recur (tail xs) h) h)))))

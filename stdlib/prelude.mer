(defmacro if (predicate do-if-true do-if-false)
  `(cond (,predicate ,do-if-true) (true ,do-if-false)))
  
(defmacro defun (name args body) `(def ,name (lambda ,args ,body)))

(defun lazy (expr) (lambda () ,expr))

(defun size (xs)
  (if (= xs ()) 0 (+ 1 (size (tail xs)))))
  
(defun empty? (xs) (= (size xs) 0))

(defun even? (n) (if (= n 0) true  (odd? (- n 1))))
  
(defun odd? (n) (if (= n 0) false (even? (- n 1))))

(defun unzip (tuples) (unzip-acc tuples '(() ())))

(defun unzip-acc (tuples acc)
  (if (empty? tuples) acc
    (unzip-acc (tail tuples) 
      (list (cons (head (head tuples)) (head acc))
            (cons (head (tail (head tuples))) (head (tail acc)))))))

(defmacro if (predicate do-if-true do-if-false)
  `(cond (,predicate ,do-if-true) (true ,do-if-false)))
  
(defun empty? (xs) (if (list? xs) (= () xs) (error "Not a list")))

(defun even? (n) (if (= n 0) true  (odd? (- n 1))))
  
(defun odd? (n) (if (= n 0) false (even? (- n 1))))

(defmacro error? (expr) 
  `(if (list? ',expr) 
     (if (empty? ',expr) false (= (head ',expr) 'error)) 
     false))